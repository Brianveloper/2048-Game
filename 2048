from tkinter import *
from tkinter import messagebox
import random

class Board:
    bg_color = {
        '2': '#eee4da',
        '4': '#ece0c8',
        '8': '#f2b179',
        '16': '#f59563',
        '32': '#f67c5f',
        '64': '#f65e3b',
        '128': '#edcf72',
        '256': '#edcc61',
        '512': '#edc53f',
        '1024': '#edc22e',
        '2048': '#3c3a32',
    }
    color = {
        '2': '#776e65',
        '4': '#776e65',
        '8': '#f9f6f2',
        '16': '#f9f6f2',
        '32': '#f9f6f2',
        '64': '#f9f6f2',
        '128': '#f9f6f2',
        '256': '#f9f6f2',
        '512': '#f9f6f2',
        '1024': '#f9f6f2',
        '2048': '#f9f6f2',
    }

    def __init__(self):
        self.window = Tk()
        self.window.title('2048 Game')
        self.window.geometry('400x500')  # Set the window size

        # Title bar
        title_label = Label(self.window, text='2048 Game', font=('Arial', 24, 'bold'), bg='#bbada0', padx=10)
        title_label.pack(side='top', fill='x')

        self.gameArea = Frame(self.window, bg='azure3')
        self.board = []
        self.gridCell = [[0] * 4 for i in range(4)]
        self.compress = False
        self.merge = False
        self.moved = False
        self.score = 0
        self.high_score = 0  # Initialize high score
        self.load_high_score()  # Load high score from a file

        # Current Score Label
        self.current_score_label = Label(self.window, text=f'Score: {self.score}', font=('Arial', 16, 'bold'))
        self.current_score_label.pack(side='top', fill='x')

        # High Score Label
        self.high_score_label = Label(self.window, text=f'High Score: {self.high_score}', font=('Arial', 16, 'bold'))
        self.high_score_label.pack(side='top', fill='x')

        # Restart Button
        restart_button = Button(self.window, text='Restart', command=self.restart)
        restart_button.pack(side='top', pady=10)

        for i in range(4):
            rows = []
            for j in range(4):
                l = Label(self.gameArea, text='', bg='azure4', font=('arial', 22, 'bold'), width=4, height=2)
                l.grid(row=i, column=j, padx=7, pady=7)
                rows.append(l)
            self.board.append(rows)
        self.gameArea.pack()

    def reverse(self):
        for ind in range(4):
            i = 0
            j = 3
            while i < j:
                self.gridCell[ind][i], self.gridCell[ind][j] = self.gridCell[ind][j], self.gridCell[ind][i]
                i += 1
                j -= 1

    def transpose(self):
        self.gridCell = [list(t) for t in zip(*self.gridCell)]

    def compressGrid(self):
        self.compress = False
        temp = [[0] * 4 for i in range(4)]
        for i in range(4):
            cnt = 0
            for j in range(4):
                if self.gridCell[i][j] != 0:
                    temp[i][cnt] = self.gridCell[i][j]
                    if cnt != j:
                        self.compress = True
                    cnt += 1
        self.gridCell = temp

    def mergeGrid(self):
        self.merge = False
        for i in range(4):
            for j in range(4 - 1):
                if self.gridCell[i][j] == self.gridCell[i][j + 1] and self.gridCell[i][j] != 0:
                    self.gridCell[i][j] *= 2
                    self.gridCell[i][j + 1] = 0
                    self.score += self.gridCell[i][j]
                    self.merge = True

    def random_cell(self):
        cells = []
        for i in range(4):
            for j in range(4):
                if self.gridCell[i][j] == 0:
                    cells.append((i, j))
        curr = random.choice(cells)
        i = curr[0]
        j = curr[1]
        self.gridCell[i][j] = 2

    def can_merge(self):
        for i in range(4):
            for j in range(3):
                if self.gridCell[i][j] == self.gridCell[i][j + 1]:
                    return True

        for i in range(3):
            for j in range(4):
                if self.gridCell[i + 1][j] == self.gridCell[i][j]:
                    return True
        return False

    def paintGrid(self):
        for i in range(4):
            for j in range(4):
                if self.gridCell[i][j] == 0:
                    self.board[i][j].config(text='', bg='azure4')
                else:
                    self.board[i][j].config(
                        text=str(self.gridCell[i][j]),
                        bg=self.bg_color.get(str(self.gridCell[i][j])),
                        fg=self.color.get(str(self.gridCell[i][j]))
                    )

    def restart(self):
        # Reset the grid, score, and repaint
        self.gridCell = [[0] * 4 for i in range(4)]
        self.score = 0
        self.paintGrid()
        # Randomly add two initial cells
        self.random_cell()
        self.random_cell()

    def save_high_score(self):
        # Save the high score to a file
        with open("high_score.txt", "w") as f:
            f.write(str(self.high_score))

    def load_high_score(self):
        # Load the high score from a file
        try:
            with open("high_score.txt", "r") as f:
                self.high_score = int(f.read())
        except FileNotFoundError:
            # If the file doesn't exist, create it with a default value of 0
            self.high_score = 0
            self.save_high_score()


class Game:
    def __init__(self, gamepanel):
        self.gamepanel = gamepanel
        self.end = False
        self.won = False

    def start(self):
        # Randomly add two initial cells
        self.gamepanel.random_cell()
        self.gamepanel.random_cell()
        self.gamepanel.paintGrid()
        self.gamepanel.window.bind('<Key>', self.link_keys)
        self.gamepanel.window.mainloop()

    def link_keys(self, event):
        if self.end or self.won:
            return

        self.gamepanel.compress = False
        self.gamepanel.merge = False
        self.gamepanel.moved = False

        pressed_key = event.keysym

        if pressed_key == 'Up':
            self.gamepanel.transpose()
            self.gamepanel.compressGrid()
            self.gamepanel.mergeGrid()
            self.gamepanel.moved = self.gamepanel.compress or self.gamepanel.merge
            self.gamepanel.compressGrid()
            self.gamepanel.transpose()

        elif pressed_key == 'Down':
            self.gamepanel.transpose()
            self.gamepanel.reverse()
            self.gamepanel.compressGrid()
            self.gamepanel.mergeGrid()
            self.gamepanel.moved = self.gamepanel.compress or self.gamepanel.merge
            self.gamepanel.compressGrid()
            self.gamepanel.reverse()
            self.gamepanel.transpose()

        elif pressed_key == 'Left':
            self.gamepanel.compressGrid()
            self.gamepanel.mergeGrid()
            self.gamepanel.moved = self.gamepanel.compress or self.gamepanel.merge
            self.gamepanel.compressGrid()

        elif pressed_key == 'Right':
            self.gamepanel.reverse()
            self.gamepanel.compressGrid()
            self.gamepanel.mergeGrid()
            self.gamepanel.moved = self.gamepanel.compress or self.gamepanel.merge
            self.gamepanel.compressGrid()
            self.gamepanel.reverse()
        else:
            pass

        self.gamepanel.paintGrid()

        # Update the score display
        self.gamepanel.current_score_label.config(text=f'Score: {self.gamepanel.score}')

        # Update high score and save it
        if self.gamepanel.score > self.gamepanel.high_score:
            self.gamepanel.high_score = self.gamepanel.score
            self.gamepanel.save_high_score()
            self.gamepanel.high_score_label.config(text=f'High Score: {self.gamepanel.high_score}')

        flag = 0
        for i in range(4):
            for j in range(4):
                if self.gamepanel.gridCell[i][j] == 2048:
                    flag = 1
                    break

        if flag == 1:
            self.won = True
            messagebox.showinfo('2048', message='You Won!')
            return

        for i in range(4):
            for j in range(4):
                if self.gamepanel.gridCell[i][j] == 0:
                    flag = 1
                    break

        if not (flag or self.gamepanel.can_merge()):
            self.end = True
            messagebox.showinfo('2048', 'Game Over!')

        if self.gamepanel.moved:
            self.gamepanel.random_cell()

        self.gamepanel.paintGrid()


gamepanel = Board()
game2048 = Game(gamepanel)
game2048.start()
